name: PFM-Custom-Container-build

on:
  workflow_dispatch:
  workflow_call:

permissions: write-all

jobs:
  Custom-Container-build:
    name: '容器编译'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    outputs:
      image_name: ${{ steps.work_env.outputs.image_name }}
      platform_pair: ${{ steps.work_env.outputs.platform_pair }}
      arch: ${{ steps.work_env.outputs.arch }}
    steps:
      - name: '环境变量'
        id: work_env
        run: |
          repo=${{ github.event.repository.name }}
          platform=${{ matrix.platform }}
          echo "image_name=${repo,,}" >> ${GITHUB_OUTPUT}
          echo "IMAGE_NAME=${repo,,}" >> ${GITHUB_ENV}
          echo "platform_pair=${platform//\//-}" >> ${GITHUB_OUTPUT}
          echo "PLATFORM_PAIR=${platform//\//-}" >> ${GITHUB_ENV}
          echo "arch=${platform#*/}" >> ${GITHUB_OUTPUT}
          echo "ARCH=${platform#*/}" >> ${GITHUB_ENV}
          echo "GH=${{ vars.GHCR_REPO }}/${repo,,}" >> ${GITHUB_ENV}

      - name: '检出分支'
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: false
          fetch-depth: 0

      - name: '检出源分支'
        id: checkout-source
        uses: actions/checkout@v4
        with:
          repository: 'PFM-PowerForMe/Jackett-Source'
          ref: main
          persist-credentials: false
          fetch-depth: 0
          path: Jackett-Source
      - name: '获取源最新Tag'
        run: |
          cd $GITHUB_WORKSPACE/Jackett-Source
          echo "JACKETT_RELEASE=$(git describe --tags $(git rev-list --tags --max-count=1))" >> ${GITHUB_ENV}
          [ "${arch}" = "arm64" ] && echo "DCF=Dockerfile.aarch64" >> ${GITHUB_ENV} || echo "DCF=Dockerfile" >> ${GITHUB_ENV}
          BUILD_DATE=$(date -d 'TZ="Asia/Shanghai" now' '+%Y-%m-%d-%H')
          echo "BUILD_DATE=${BUILD_DATE}" >> ${GITHUB_ENV}
          
          

      - name: '设置容器编译工具'
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          cache-binary: true
          cleanup: true
          platforms: ${{ matrix.platform }}
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
          driver-opts: |
            network=host

      - name: '登录GHCR'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: '容器meta'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GH }}
          tags: |
            type=raw,value=latest-${{ env.ARCH }},enable=true

      - name: '编译并发布'
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          cache-from: type=registry,ref=${{ env.GH }}:latest
          cache-to: type=inline
          context: .
          file: ${{ env.DCF }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: |
            type=image,name=${{ env.GH }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            JACKETT_RELEASE=${{ env.JACKETT_RELEASE }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.JACKETT_RELEASE }}

      - name: '导出 digest'
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: '上传 artifact'
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: '容器合并'
    needs: Custom-Container-build
    runs-on: ubuntu-latest
    env:
      GH: ${{ vars.GHCR_REPO }}/${{ needs.Custom-Container-build.outputs.image_name }}
    steps:
      - name: '下载 digests'
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digest-*
          merge-multiple: true

      - name: '设置容器编译工具'
        uses: docker/setup-buildx-action@v3

      - name: '登录GHCR'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: '创建并发布多架构 manifest'
        working-directory: ${{ runner.temp }}/digests
        run: |
          ls .
          docker buildx imagetools create \
            -t ${{ env.GH }}:latest \
           $(printf '${{ env.GH }}@sha256:%s ' *)
           
      - name: '检查容器'
        run: |
          docker buildx imagetools inspect ${{ env.GH }}:latest

  clean:
    name: 'GHCR清理'
    needs: [Custom-Container-build, merge]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.Custom-Container-build.outputs.image_name }}

    steps:
      - name: '清理GHCR容器镜像'
        uses: actions/delete-package-versions@v5
        with: 
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 30
          delete-only-untagged-versions: 'true'